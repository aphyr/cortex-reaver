#!/usr/bin/ruby

require 'rubygems'
require 'trollop'
require 'ramaze'
require __DIR__ + '/../lib/cortex_reaver'
require 'irb'

# IRB monkeypatch to let us load a custom context object
class IRB::Irb
  alias initialize_orig initialize
  def initialize(workspace = nil, *args)
    default = IRB.conf[:DEFAULT_OBJECT]
    workspace ||= IRB::WorkSpace.new default if default
    initialize_orig(workspace, *args)
  end
end

class CortexReaver::Runner
  COMMANDS = ['blank', 'start', 'status', 'reload', 'restart', 'stop', 'console', 'dump', 'load']

  # Asks a question and returns a true_false answer
  def confirm(question)
    return true if @global_opts[:force]

    puts question + " (yes/no)"
    print '> '
    STDOUT.flush

    if STDIN.gets.strip =~ /^y(?:es)?/i
      true
    else
      false
    end
  end

  def initialize
    # Parse options
    @global_opts = Trollop::options do
      banner "#{CortexReaver::APP_NAME} #{CortexReaver::APP_VERSION}"
      version CortexReaver::APP_VERSION
      banner <<EOF
Syntax: cortex_reaver [opts] command [command_opts]

blank               Wipes the database and sets up a clean copy of the
                    latest version
console             Starts an IRB session
dump <to_file>      Dump database to file
load <from_file>    Load a database dump
migrate [version]   Migrate the database to the given schema version, or to 
                    the latest schema
reload              Reload CSS, JS, configuration, etc.
restart             Restart Cortex Reaver
start               Start Cortex Reaver
status              Check the status of the local CortexReaver via HTTP.
stop                Stop Cortex Reaver

Options:

EOF

      opt :force, "Just do it", :default => false
      opt :config, "Configuration file"
      stop_on COMMANDS
    end

    if file = @global_opts[:config]
      CortexReaver.config_file = file
    end

    @command = ARGV.shift
    @opts = case @command
      when "blank"
        blank
      when 'console'
        console 
      when "dump"
        if file = ARGV.shift
          dump file
        else
          abort "No dump file given"
        end
      when "load"
        if file = ARGV.shift
          self.load file
        else
          abort "No load file given"
        end
      when "migrate"
        if version = ARGV.shift
          migrate version.to_i
        else
          migrate
        end
      when 'restart'
        restart
      when 'reload'
        reload
      when 'start'
        start
        @opts = Trollop::options do
          opt :daemon, :type => :boolean, :default => nil
        end
      when 'status'
        status
      when 'stop'
        stop
      when 'test'
      else
        Trollop::die "unknown subcommand #{@command.inspect}"
    end
  end

  # Dump the database to disk
  def dump(file)
    require 'sequel/extensions/migration'
    
    # Connect to current DB
    CortexReaver.reload_config
    CortexReaver.setup_db false
    current_version = Sequel::Migrator.get_current_migration_version(CortexReaver.db)

    puts "Using database #{CortexReaver.config[:database][:host]}/#{CortexReaver.config[:database][:database]}."

    # Prepare dump file
    if File.file? file
      exit unless confirm("Overwrite #{File.expand_path(file)} with current Cortex Reaver database?")
      FileUtils.rm file
    end

    # Connect to dump DB
    dump = Sequel.connect "sqlite:////#{File.expand_path(file)}"
    Sequel::Migrator.apply dump, File.join(CortexReaver::LIB_DIR, 'migrations'), current_version

    # Copy tables
    CortexReaver.db.tables.each do |table|
      puts "Table #{table} (#{db[table].count} rows)..."
      dump_table = dump[table]
      db[table].each do |row|
        dump_table << row
      end
    end   
        
    puts "Dumped database to #{file}."
  end

  # Load an SQLite database from disk.
  def load(file)
    require 'sequel/extensions/migration'
    
    # Connect to dump DB
    dump = Sequel.connect "sqlite:////#{File.expand_path(file)}"
    current_version = Sequel::Migrator.get_current_migration_version(dump)

    # Connect to current DB
    CortexReaver.reload_config
    CortexReaver.setup_db false
    puts "Using database #{CortexReaver.config[:database][:host]}/#{CortexReaver.config[:database][:database]}."

    unless confirm("Overwrite current database with #{File.expand_path(file)}?")
      exit
    end
     
    # Drop current migrations and move to the dump's version
    system($0, '-f', 'migrate', '0')
    Sequel::Migrator.apply CortexReaver.db, File.join(CortexReaver::LIB_DIR, 'migrations'), current_version

    # Copy tables
    dump.tables.each do |table|
      puts "Table #{table} (#{dump[table].count} rows)..."
      db_table = CortexReaver.db[table]
      dump[table].each do |row|
        db_table << row
      end
    end   
        
    puts "Database #{file} loaded."
  end

  # Make a quick HTTP request to see how we're doing.
  def status
    require 'open-uri'
    CortexReaver.reload_config
    response = open("http://#{CortexReaver.config[:host] || 'localhost'}:#{CortexReaver.config[:port]}/")
    puts response.status.join(' ');
  end

  def migrate(version = nil)
    require 'sequel/extensions/migration'
    
    # Get ready
    CortexReaver.reload_config
    CortexReaver.setup_db false
    CortexReaver.load
    CortexReaver.init

    puts "Using database #{CortexReaver.config[:database][:host]}/#{CortexReaver.config[:database][:database]}."

    current_version = Sequel::Migrator.get_current_migration_version(CortexReaver.db)
    latest_version = Sequel::Migrator.latest_migration_version(File.join(CortexReaver::LIB_DIR, 'migrations'))

    if version == current_version and current_version == latest_version
      puts "The database is already at the latest version (#{latest_version})."
      exit
    elsif version == current_version
      puts "The database is already at version #{version}."
      exit
    end

    if version == 0
      message = "You are migrating to version 0. This will drop your cortex_reaver database! Are you sure you want to do this?"
    elsif version
      message = "Ready to migrate from version #{current_version} to version #{version}?"
    else
      message = "Ready to migrate from version #{current_version} to latest version (#{latest_version})?"
    end

    if confirm message
      puts "Migrating database from version #{current_version} to version #{version}..."
      Sequel::Migrator.apply(CortexReaver.db, File.join(CortexReaver::LIB_DIR, 'migrations'), version)
      puts "Done."
    else
      exit
    end
  end

  def blank
    if confirm "Are you sure you wish to wipe the database?"
      # Strangely, calling Migrator.apply to go down and then up doesn't seem
      # to work. :-/
      system($0, '-f', 'migrate', '0')
      system($0, '-f', 'migrate')
    end
  end

  def console
    require 'irb'
    require 'irb/completion'
    
    # Start an IRB session
    CortexReaver.reload_config
    CortexReaver.setup

    # Don't let IRB try to interpret our command line
    ARGV.clear

    IRB.conf[:DEFAULT_OBJECT] = CortexReaver
    IRB.start
  end

  def reload
    CortexReaver.reload
  end

  def restart
    CortexReaver.restart
  end

  def start
    CortexReaver.start
  end

  def stop
    CortexReaver.stop
  end

  def test
    require File.join(CortexReaver::LIB_DIR, '..', '..', 'spec', 'spec')
  end
end

CortexReaver::Runner.new
